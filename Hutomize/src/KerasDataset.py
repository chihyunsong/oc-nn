import numpy as np
import sys
from tensorflow.python.keras import backend as K
from tensorflow.python.keras.models import Model
from tensorflow.python.keras.layers import Flatten, Dense, Dropout
from tensorflow.python.keras.applications.resnet50 import ResNet50, preprocess_input
from tensorflow.python.keras.optimizers import Adam
from tensorflow.python.keras.preprocessing.image import ImageDataGenerator
PROJECT_DIR = "/tf/Hutomize/"
sys.path.append(PROJECT_DIR)

def random_crop(img, random_crop_size):
    # Note: image_data_format is 'channel_last'
    assert img.shape[2] == 3
    height, width = img.shape[0], img.shape[1]
    dy, dx = random_crop_size
    x = np.random.randint(0, width - dx + 1)
    y = np.random.randint(0, height - dy + 1)
    return img[y:(y+dy), x:(x+dx), :]

def center_crop(img, center_crop_size):
    height, width = img.shape[0], img.shape[1]
    dy, dx = center_crop_size
    x = int((width - dx)/2 ) 
    y = int((height - dy)/2)

    return img[y:(y+dy), x:(x+dx), :]


def crop_generator(batches, crop_length, dataType):
    """Take as input a Keras ImageGen (Iterator) and generate random
    crops from the image batches generated by the original iterator.
    """
    while True:
        batch_x, batch_y = next(batches)
        batch_crops = np.zeros((batch_x.shape[0], crop_length, crop_length, 3))
        if dataType == 'AE':
            batch_crops_y = np.zeros((batch_x.shape[0], crop_length, crop_length, 3))
        for i in range(batch_x.shape[0]):
            if dataType == 'AE':
                batch_crops[i] = random_crop(batch_x[i], (crop_length, crop_length))
            
                batch_crops_y[i] = batch_crops[i]
            elif dataType == 'OCNN':
                batch_crops[i] = center_crop(batch_x[i], (crop_length, crop_length))

            gaus = np.random.normal(loc=0,scale=0.2, size =(224,224,3))
            batch_crops[i] = batch_crops[i] + gaus
            
            batch_crops[i] = np.clip(batch_crops[i],0,1)
            if dataType == 'OCNN':
                batch_crops_y = batch_y
        yield (batch_crops, batch_crops_y)

class SurgicalDataset(object):
    def __init__(self, data_path = '', dataType = 'AE'):
        BATCH_SIZE = 60
        print ('batch SIZE', BATCH_SIZE)
        self.dataPath = data_path
        self.trainDataGenerator = ImageDataGenerator(rescale = 1./255.)
        self.testDataGenerator = ImageDataGenerator(rescale = 1./255.)

        train_dir = PROJECT_DIR + 'data2/'
        print("Training Directory: " + train_dir)
        if dataType == 'AE':
            cm = 'input'
        else: 
            cm = 'categorical'
        train_generator = self.trainDataGenerator.flow_from_directory(train_dir,shuffle=True, batch_size=BATCH_SIZE, target_size=(256, 320), color_mode='rgb', class_mode=cm)
        self.data = crop_generator(train_generator, 224, dataType)
        if dataType == 'OCNN':
            test_generator = self.testDataGenerator.flow_from_directory(train_dir,shuffle=False, batch_size=6660, target_size=(256, 320), color_mode='rgb', class_mode=cm)
            self.testData = crop_generator(test_generator, 224, dataType)

    def getIterator(self):
        return self.data
    def getTest(self):
        return self.testData



